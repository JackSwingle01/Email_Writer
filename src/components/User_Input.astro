---
import Clear_Button from "./Clear_Button.astro";
---

<div id="options_div">
    <div class="input_item">
        Who is the email being sent from: <br /><input
            type="text"
            id="sender_textinput"
        />
    </div>

    <div class="input_item">
        Who is the email being sent to: <br /><input
            type="text"
            id="recipient_textinput"
        />
    </div>

    <div class="input_item">
        What is the topic/purpose of the email: <br /><textarea
            id="purpose_textarea"></textarea>
    </div>

    <div class="input_item">
        <label>What should the approximate length be:</label>
        <select id="length_select">
            <option value="">Select a length</option>
            <option value="Short">Short</option>
            <option value="Medium">Medium</option>
            <option value="Long">Long</option>
        </select>
    </div>

    <div class="input_item">
        <label>What should the tone of the email be:</label>
        <select id="tone_select">
            <option value="">Select a tone</option>
            <option value="Friendly">Friendly</option>
            <option value="Professional">Professional</option>
            <option value="Conversational">Conversational</option>
        </select>
    </div>
    <div id="buttons_div">
        <button id="generate_button">Generate Email</button>
        <Clear_Button />
    </div>
</div>

<script>
    // get html elements
    const sender = document.querySelector(
        "#sender_textinput"
    ) as HTMLInputElement;

    const recipient = document.querySelector(
        "#recipient_textinput"
    ) as HTMLInputElement;
    const purpose = document.querySelector(
        "#purpose_textarea"
    ) as HTMLTextAreaElement;
    const length = document.querySelector(
        "#length_select"
    ) as HTMLSelectElement;
    const tone = document.querySelector("#tone_select") as HTMLSelectElement;

    const button = document.querySelector(
        "#generate_button"
    ) as HTMLButtonElement;
    const output = document.querySelector(
        "#Output_Field"
    ) as HTMLParagraphElement;

    // max token counts for each length
    const maxTokenCounts = {
        Short: 200,
        Medium: 500,
        Long: 1000,
    };

    // global variable for auth header
    var auth_header: string;

    button.addEventListener("click", async function () {
        // the api is slow, so let the user know that the email is being generated
        output.textContent = "Generating...";

        // construct the prompt and get the max tokens
        let prompt = constructPrompt();
        let maxTokens = maxTokenCounts[length.value] || 500;

        // login to the api
        auth_header = await login("admin", "admin");

        // make a get request to the server
        let email = await getCompletion(prompt, maxTokens);
        let text = await email.text();
        console.log(text);
        // display the email
        output.textContent = text;
    });

    function constructPrompt() {
        let prompt = "Write a";
        prompt +=
            length.value && !(length.value == "Medium")
                ? ` ${length.value}`
                : "n";
        prompt += " email";
        prompt += sender.value ? ` from ${sender.value}` : ""; // sender
        prompt += recipient.value ? ` to ${recipient.value}` : ""; // recepient
        prompt += purpose.value ? ` about ${purpose.value}` : ""; // purpose
        prompt += tone.value ? ` in a ${tone.value} tone` : ""; // tone
        prompt += ".";
        return prompt;
    }

    const server_address = 'https://email-writer-server-9.onrender.com/'

    async function login(username: string, password: string) {
        console.log("Logging in...");
        const auth = JSON.stringify({ username, password });
        const url = server_address + "login";

        const response = await fetchWithErrorHandling(url, {
            method: "POST",
            body: auth,
            headers: {
                "Content-Type": "application/json",
            },
        });
        const { token } = await response.json();
        console.log("Logged in");
        return token;
    }

    async function getCompletion(
        prompt: string,
        maxTokens: number = 10,
        temperature: number = 0.7
    ) {
        let url = server_address + "email-completion/";
        const query = `?prompt=${prompt}&maxTokens=${maxTokens}&temperature=${temperature}`;
        url += query;

        const response = await fetchWithErrorHandling(url, {
            method: "GET",
            headers: {
                Authorization: `Bearer: ${auth_header}`,
                "Content-Type": "application/json",
            },
        });
        return response;
    }

    async function fetchWithErrorHandling(url: string, options: any) {
        try {
            const response = await fetch(url, options);
            if (!response.ok) {
                throw new Error("Network response was not ok.");
            }
            return response;
        } catch (error) {
            console.log(error);
            output.textContent = "Error: " + error;
            throw error;
        }
    }
</script>
